{"version":3,"sources":["components/show/Show.js","components/showList/ShowList.js","components/filter/Filter.js","containers/App.js","serviceWorker.js","index.js"],"names":["Show","id","image","name","rating","status","key","class","this","className","src","alt","title","React","Component","ShowList","list","console","log","props","showList","map","item","show","original","average","Filter","filterHandlerChild","bind","ev","filterHandler","htmlFor","type","placeholder","onChange","value","inputText","checked","isRunningOnly","isRunningHandlerChild","App","getDataFromApi","fetch","API_DATA","then","response","json","responseData","setState","currentTarget","state","unfilteredShows","filteredShows","filter","serie","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a7207acf.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Show extends React.Component {\n    constructor({id, image, name, rating, status}) {\n        super({id, image, name, rating, status});\n        this.key = id;\n        this.image = image;\n        this.name = name;\n        this.rating = rating;\n        this.status = status;\n    }\n\n    render() {\n        return(\n            <li class=\"show__list-item\" key={this.key}>\n                <div className=\"show__container\">\n                    <div className=\"show-image\">\n                        <img src={this.image} alt={this.name} title={this.name} />\n                    </div>\n                    <header className=\"show-header\">\n                        <h2 className=\"show-header-title\">{this.name}</h2>\n                    </header>\n                    <footer className=\"show-footer\">\n                        <p className=\"show-footer-rating\">{this.rating}</p>\n                        <p className=\"show-footer-status\">{this.status}</p>\n                    </footer>\n                </div>\n            </li>\n        );\n    }\n}\n\nexport default Show;","import React from \"react\";\nimport Show from \"../show/Show.js\";\n\nconst altImage = 'https://via.placeholder.com/210x295/ffffff/666666/?text=TV-SHOW'\nconst altRating = 'no rating'\n\nclass ShowList extends React.Component {\n    constructor({list}) {\n        super(list);\n    }\n\n    render() {\n        console.log(this.props);\n        return(\n            <ul class=\"show__list\">\n                {this.props.showList.map((item) =>\n                <Show\n                    id={item.show.id}\n                    image={item.show.image ? item.show.image.original : altImage}\n                    name={item.show.name}\n                    rating={item.show.rating.average ? item.show.rating.average : altRating}\n                    status={item.show.status}\n                />\n                )}\n            </ul>\n        );\n    }\n}\n\nexport default ShowList;","import React, { Component } from 'react';\n\nclass Filter extends Component {\n    constructor(props) {\n        super(props);\n        this.filterHandlerChild = this.filterHandlerChild.bind(this);\n    }\n\n    filterHandlerChild (ev) {\n        this.props.filterHandler(ev)\n    }\n\n    render() {\n        return (\n            <form>\n                <label htmlFor=\"search\">Search for a show</label>\n                <input\n                    type=\"text\"\n                    id=\"search\"\n                    placeholder=\"Family Guy\"\n                    onChange={this.filterHandlerChild}\n                    value={this.props.inputText}\n                />\n                <label htmlFor=\"running-filter\">\n                <input\n                    type=\"checkbox\"\n                    id=\"running-filter\"\n                    checked={this.props.isRunningOnly === true ? true : false}\n                    onChange={this.isRunningHandlerChild}\n                />\n                Show only currently running shows\n                </label>\n            </form>\n        );\n    }\n}\n\nexport default Filter;","import React from \"react\";\nimport '../scss/main.scss';\nimport ShowList from '../components/showList/ShowList.js';\nimport Filter from '../components/filter/Filter.js';\n\n//SHOWLIST\nconst API_DATA = 'http://api.tvmaze.com/search/shows'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      showList: [],\n      inputText: '',\n    };\n\n    this.getDataFromApi = this.getDataFromApi.bind(this);\n    this.filterHandler = this.filterHandler.bind(this);\n  }\n\n  componentDidMount() {\n    this.getDataFromApi();\n  }\n\n  getDataFromApi = () => {\n    return fetch(API_DATA + '?q=girls') //girls = ${inputName}\n      .then((response) => response.json())\n      .then((responseData) => {\n        console.log(responseData);\n        this.setState({showList: responseData});\n      });\n  }\n\n  filterHandler = (ev) => {\n    console.log(ev.currentTarget.value);\n    this.setState({inputText: ev.currentTarget.value});\n  }\n\n  render() {\n    const inputText = this.state.inputText;\n    const unfilteredShows = this.state.showList;\n    const filteredShows = unfilteredShows.filter(serie =>\n      inputText ? serie.show.name.toLowerCase().includes(inputText.toLowerCase()) : true\n    );\n\n    console.log(filteredShows);\n\n    return(\n      <div className=\"App\">\n        <Filter filterHandler={this.filterHandler} />\n        {unfilteredShows.length ? <ShowList showList=\n          {filteredShows ? filteredShows : unfilteredShows}\n        /> : <p>CARGANDO</p>}\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}